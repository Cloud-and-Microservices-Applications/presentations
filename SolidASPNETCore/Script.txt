AutoMapper
Filters
ViewComponents
Validation
Custom Action results? maybe

What is a fat controller?
Too much code
Too many responsibilities
Hits too many layers
 - Ex: AccountController
 - Using statements
 - Register action
  - Membership
  - Forms service
  - Modelstate
Add:
1. Dependency Inversion
- Add controller builder
- Add new ctor
2. AutoMapper
- Add ViewModelProfile
- Add EditModelProfile
- Add Initialize in Boot strapper
- Add initialize call to global.asax
- Fix Index
- Fix Show
- Fix Edit
3. Model Binding
- Create ConferenceModelBinder
- Register custom model binder
4. Action Results
- Create AutoMapViewResult
- Create AutoMapView() method
- Fix Index
- Fix Show
- Fix Edit
- Create IFormHandler<T>
- Create ConferenceEditModelFormHandler
- Fill in FormActionResult<T>
- Add code to UiRegistry
- Create Form() method on DefaultController
- Fix Edit post action
Conclusion
- Identify concepts
-- Executing queries
-- Mapping models
-- Retrieving entities
-- Processing a command
- Make concepts explicit
-- Controller is the traffic cop
-- Decides "what", not "how"
-- Each concept is a specific prototype

NEW MODE

StudentController
1. Add IoC

        public DefaultRegistry() {
            Scan(
                scan => {
                    scan.TheCallingAssembly();
                    scan.WithDefaultConventions();
					scan.With(new ControllerConvention());
                    scan.LookForRegistries();
                    scan.AssemblyContainingType<DefaultRegistry>();
                });
            For<SchoolContext>().Use<SchoolContext>().LifecycleIs<TransientLifecycle>();
            //For<IExample>().Use<Example>();
        }

- Transaction filter

    public class MvcTransactionFilter : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var context = StructuremapMvc.StructureMapDependencyScope.CurrentNestedContainer.GetInstance<SchoolContext>();
            context.BeginTransaction();
        }

        public override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            var instance = StructuremapMvc.StructureMapDependencyScope.CurrentNestedContainer.GetInstance<SchoolContext>();
            instance.CloseTransaction(filterContext.Exception);
        }
    }
	
SchoolContext.cs

        private DbContextTransaction _currentTransaction;

		public void BeginTransaction()
        {
            try
            {
                if (_currentTransaction != null)
                {
                    return;
                }

                _currentTransaction = Database.BeginTransaction(IsolationLevel.ReadCommitted);
            }
            catch (Exception)
            {
                // todo: log transaction exception
                throw;
            }
        }

        public void CloseTransaction()
        {
            CloseTransaction(exception: null);
        }

        public void CloseTransaction(Exception exception)
        {
            try
            {
                if (_currentTransaction != null && exception != null)
                {
                    // todo: log exception
                    _currentTransaction.Rollback();
                    return;
                }

                SaveChanges();

                if (_currentTransaction != null)
                {
                    _currentTransaction.Commit();
                }
            }
            catch (Exception)
            {
                // todo: log exception
                if (_currentTransaction != null && _currentTransaction.UnderlyingTransaction.Connection != null)
                {
                    _currentTransaction.Rollback();
                }

                throw;
            }
            finally
            {
                if (_currentTransaction != null)
                {
                    _currentTransaction.Dispose();
                    _currentTransaction = null;
                }
            }
        }	

FilterConfig.cs

            filters.Add(new MvcTransactionFilter());

1a Validations

_Layout.cshtml

<script type="text/javascript">
    var highlightFields = function (response) {

        $('.form-group').removeClass('has-error');

        $.each(response, function (propName, val) {
            var nameSelector = '[name = "' + propName.replace(/(:|\.|\[|\])/g, "\\$1") + '"]',
                idSelector = '#' + propName.replace(/(:|\.|\[|\])/g, "\\$1");
            var $el = $(nameSelector) || $(idSelector);

            if (val.Errors.length > 0) {
                $el.closest('.form-group').addClass('has-error');
            }
        });
    };
    var highlightErrors = function (xhr) {
        try {
            var data = JSON.parse(xhr.responseText);
            highlightFields(data);
            showSummary(data);
            window.scrollTo(0, 0);
        } catch (e) {
            // (Hopefully) caught by the generic error handler in `config.js`.
        }
    };
    var showSummary = function (response) {
        $('#validationSummary').empty().removeClass('hidden');

        var verboseErrors = _.flatten(_.pluck(response, 'Errors')),
            errors = [];

        var nonNullErrors = _.reject(verboseErrors, function (error) {
            return error.ErrorMessage.indexOf('must not be empty') > -1;
        });

        _.each(nonNullErrors, function (error) {
            errors.push(error.ErrorMessage);
        });

        if (nonNullErrors.length !== verboseErrors.length) {
            errors.push('The highlighted fields are required to submit this form.');
        }

        var $ul = $('#validationSummary').append('<ul></ul>');

        _.each(errors, function (error) {
            var $li = $('<li></li>').text(error);
            $li.appendTo($ul);
        });
    };
    var redirect = function (data) {
        if (data.redirect) {
            window.location = data.redirect;
        } else {
            window.scrollTo(0, 0);
            window.location.reload();
        }
    };

    $('form[method=post]').not('.no-ajax').on('submit', function () {
        var submitBtn = $(this).find('[type="submit"]');

        submitBtn.prop('disabled', true);
        $(window).unbind();

        var $this = $(this),
            formData = $this.serialize();

        $this.find('div').removeClass('has-error');

        $.ajax({
            url: $this.attr('action'),
            type: 'post',
            data: formData,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            dataType: 'json',
            statusCode: {
                200: redirect
            },
            complete: function () {
                submitBtn.prop('disabled', false);
            }
        }).error(highlightErrors);

        return false;
    });

</script>

ValidatorActionFilter.cs

    public class ValidatorActionFilter : IActionFilter
    {
        public void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (!filterContext.Controller.ViewData.ModelState.IsValid)
            {
                var result = new ContentResult();
                string content = JsonConvert.SerializeObject(filterContext.Controller.ViewData.ModelState, new JsonSerializerSettings
                {
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
                result.Content = content;
                result.ContentType = "application/json";

                filterContext.HttpContext.Response.StatusCode = 400;
                filterContext.Result = result;
            }
        }

        public void OnActionExecuted(ActionExecutedContext filterContext)
        {

        }
    }

FilterConfig.cs

filters.Add(new ValidatorActionFilter());

ControllerExtensions.cs

    public static class ControllerExtensions
    {
        public static ActionResult RedirectToActionJson<TController>(this TController controller, string action)
            where TController : Controller
        {
            return controller.JsonNet(new
            {
                redirect = controller.Url.Action(action)
            }
                );
        }

        public static ContentResult JsonNet(this Controller controller, object model)
        {
            var serialized = JsonConvert.SerializeObject(model, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            });

            return new ContentResult
            {
                Content = serialized,
                ContentType = "application/json"
            };
        }
    }

		
2. Add AutoMapper

Index

StudentModels.cs

    public class StudentIndexQuery
    {
        public string SortOrder { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }
        public int? Page { get; set; }
    }

    public class StudentIndexResult
    {
        public string CurrentSort { get; set; }
        public string NameSortParm { get; set; }
        public string DateSortParm { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }

        public IPagedList<StudentIndexModel> Results { get; set; }
    }

    public class StudentIndexModel
    {
        public int ID { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        [Display(Name = "Enrollment Date")]
        public DateTime EnrollmentDate { get; set; }
    }

    public class StudentMappingProfile : Profile
    {
        protected override void Configure()
        {
            CreateMap<Student, StudentIndexModel>();
        }
    }

StudentController.cs

        public ViewResult Index(StudentIndexQuery query)
        {
            var model = new StudentIndexResult
            {
                CurrentSort = query.SortOrder,
                NameSortParm = String.IsNullOrEmpty(query.SortOrder) ? "name_desc" : "",
                DateSortParm = query.SortOrder == "Date" ? "date_desc" : "Date",
            };

            if (query.SearchString != null)
            {
                query.Page = 1;
            }
            else
            {
                query.SearchString = query.CurrentFilter;
            }

            model.CurrentFilter = query.SearchString;
            model.SearchString = query.SearchString;

            var students = from s in db.Students
                           select s;
            if (!String.IsNullOrEmpty(query.SearchString))
            {
                students = students.Where(s => s.LastName.Contains(query.SearchString)
                                               || s.FirstMidName.Contains(query.SearchString));
            }
            switch (query.SortOrder)
            {
                case "name_desc":
                    students = students.OrderByDescending(s => s.LastName);
                    break;
                case "Date":
                    students = students.OrderBy(s => s.EnrollmentDate);
                    break;
                case "date_desc":
                    students = students.OrderByDescending(s => s.EnrollmentDate);
                    break;
                default: // Name ascending 
                    students = students.OrderBy(s => s.LastName);
                    break;
            }

            int pageSize = 3;
            int pageNumber = (query.Page ?? 1);
            model.Results = students.ProjectToPagedList<StudentIndexModel>(pageNumber, pageSize);

            return View(model);
        }

Index.cshtml

@{ int i = 0; }
i++;

AutoMapperBootstrapper.cs

    public class AutoMapperBootstrapper
    {
        private static bool _initialized;
        private static readonly object Lock = new object();

        public static void Initialize(IContainer container)
        {
            lock (Lock)
            {
                if (_initialized) return;
                InitializeInternal(container);
                _initialized = true;
            }
        }

        private static void InitializeInternal(IContainer container)
        {
            Mapper.Initialize(cfg =>
            {
                foreach (var profile in container.GetAllInstances<Profile>())
                {
                    cfg.AddProfile(profile);
                }

                cfg.ConstructServicesUsing(container.GetInstance);
            });
        }
    }

StructureMapMvc.cs

AutoMapperBootstrapper.Initialize(container);

DefaultRegistry.cs

scan.AddAllTypesOf<Profile>();

Details

    public class StudentDetailsModel
    {
        public int ID { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        [Display(Name = "Enrollment Date")]
        public DateTime EnrollmentDate { get; set; }
        public List<Enrollment> Enrollments { get; set; }

        public class Enrollment
        {
            public string CourseTitle { get; set; }
            public Grade? Grade { get; set; }
        }
    }

StudentController.cs

	var student = db.Students
	.Where(s => s.ID == message.Id)
	.ProjectToSingleOrDefault<StudentDetailsModel>();


Details.cshtml

<div>
    <h4>Student</h4>
	<hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.LastName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.LastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.FirstMidName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.FirstMidName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.EnrollmentDate)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.EnrollmentDate)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Enrollments)
        </dt>
        <dd>
            <table class="table">
                <tr>
                    <th>Course Title</th>
                    <th>Grade</th>
                </tr>
                @foreach (var item in Model.Enrollments)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.CourseTitle)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Grade)
                        </td>
                    </tr>
                }
            </table>
        </dd>
    </dl>
</div>

Create

    public class StudentCreateModel
    {
        [Required]
        [StringLength(50)]
        [Display(Name = "Last Name")]
        public string LastName { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "First name cannot be longer than 50 characters.")]
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Enrollment Date")]
        public DateTime? EnrollmentDate { get; set; }
    }

            var student = Mapper.Map<StudentCreateModel, Student>(model);

            db.Students.Add(student);

Edit

    public class StudentEditModel : StudentCreateModel
    {
        public int ID { get; set; }
    }

        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
			var student = db.Students
				.Where(s => s.ID == id)
				.ProjectToSingleOrDefault<StudentEditModel>();

			return View(student);
        }
	
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(StudentEditModel model)
        {
			var student = db.Students.Find(message.ID);

			Mapper.Map(message, student);

Delete

    public class StudentDeleteModel : StudentEditModel
    {
        
    }
	
Delete.cshtml

@Html.HiddenFor(m => m.ID)

3. MediatR

DefaultRegistry.cs

                    scan.AssemblyContainingType<IMediator>();
                    scan.AddAllTypesOf(typeof(IRequestHandler<,>));

            For<SingleInstanceFactory>().Use<SingleInstanceFactory>(ctx => t => ctx.GetInstance(t));
            For<MultiInstanceFactory>().Use<MultiInstanceFactory>(ctx => t => ctx.GetAllInstances(t));

StudentModels.cs

    public class StudentIndexQuery : IRequest<StudentIndexResult>
    {
        public string SortOrder { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }
        public int? Page { get; set; }
    }

    public class StudentIndexResult
    {
        public string CurrentSort { get; set; }
        public string NameSortParm { get; set; }
        public string DateSortParm { get; set; }
        public string CurrentFilter { get; set; }
        public string SearchString { get; set; }

        public IPagedList<StudentIndexModel> Results { get; set; }
    }

    public class StudentIndexModel
    {
        public int ID { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        [Display(Name = "Enrollment Date")]
        public DateTime EnrollmentDate { get; set; }
    }

    public class StudentDetailsQuery : IRequest<StudentDetailsModel>
    {
        public int? Id { get; set; }
    }

    public class StudentDetailsModel
    {
        public int ID { get; set; }
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }
        [Display(Name = "Last Name")]
        public string LastName { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        [Display(Name = "Enrollment Date")]
        public DateTime EnrollmentDate { get; set; }
        public List<Enrollment> Enrollments { get; set; }

        public class Enrollment
        {
            public string CourseTitle { get; set; }
            public Grade? Grade { get; set; }
        }
    }

    public class StudentCreateModel : StudentModel, IRequest
    {
    }

    public class StudentModel
    {
        [Required]
        [StringLength(50)]
        [Display(Name = "Last Name")]
        public string LastName { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "First name cannot be longer than 50 characters.")]
        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Enrollment Date")]
        public DateTime? EnrollmentDate { get; set; }
    }

    public class StudentEditQuery : IRequest<StudentEditModel>
    {
        public int? Id { get; set; }
    }

    public class StudentEditModel : StudentModel, IRequest
    {
        public int ID { get; set; }
    }

    public class StudentDeleteModel : IRequest
    {
        public int ID { get; set; }

        [Display(Name = "Last Name")]
        public string LastName { get; set; }

        [Display(Name = "First Name")]
        public string FirstMidName { get; set; }

        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}")]
        [Display(Name = "Enrollment Date")]
        public DateTime? EnrollmentDate { get; set; }
    }

    public class StudentDeleteQuery : IRequest<StudentDeleteModel>
    {
        public int? Id { get; set; }
    }

StudentHandlers.cs

public class StudentIndexQueryHandler : IRequestHandler<StudentIndexQuery, StudentIndexResult>
    {
        private readonly SchoolContext db;

        public StudentIndexQueryHandler(SchoolContext db)
        {
            this.db = db;
        }

        public StudentIndexResult Handle(StudentIndexQuery message)
        {
            var model = new StudentIndexResult
            {
                CurrentSort = message.SortOrder,
                NameSortParm = String.IsNullOrEmpty(message.SortOrder) ? "name_desc" : "",
                DateSortParm = message.SortOrder == "Date" ? "date_desc" : "Date",
            };

            if (message.SearchString != null)
            {
                message.Page = 1;
            }
            else
            {
                message.SearchString = message.CurrentFilter;
            }

            model.CurrentFilter = message.SearchString;
            model.SearchString = message.SearchString;

            var students = from s in db.Students
                           select s;
            if (!String.IsNullOrEmpty(message.SearchString))
            {
                students = students.Where(s => s.LastName.Contains(message.SearchString)
                                               || s.FirstMidName.Contains(message.SearchString));
            }
            switch (message.SortOrder)
            {
                case "name_desc":
                    students = students.OrderByDescending(s => s.LastName);
                    break;
                case "Date":
                    students = students.OrderBy(s => s.EnrollmentDate);
                    break;
                case "date_desc":
                    students = students.OrderByDescending(s => s.EnrollmentDate);
                    break;
                default: // Name ascending 
                    students = students.OrderBy(s => s.LastName);
                    break;
            }

            int pageSize = 3;
            int pageNumber = (message.Page ?? 1);
            model.Results = students.ProjectToPagedList<StudentIndexModel>(pageNumber, pageSize);

            return model;
        }
    }

    public class StudentDetailsQueryHandler : IRequestHandler<StudentDetailsQuery, StudentDetailsModel>
    {
        private readonly SchoolContext db;

        public StudentDetailsQueryHandler(SchoolContext db)
        {
            this.db = db;
        }

        public StudentDetailsModel Handle(StudentDetailsQuery message)
        {
            var student = db.Students
                .Where(s => s.ID == message.Id)
                .ProjectToSingleOrDefault<StudentDetailsModel>();

            return student;
        }
    }

    public class StudentCreateHandler : RequestHandler<StudentCreateModel>
    {
        private readonly SchoolContext db;

        public StudentCreateHandler(SchoolContext db)
        {
            this.db = db;
        }

        protected override void HandleCore(StudentCreateModel message)
        {
            var student = Mapper.Map<StudentCreateModel, Student>(message);

            db.Students.Add(student);
        }
    }


    public class StudentEditQueryHandler : IRequestHandler<StudentEditQuery, StudentEditModel>
    {
        private readonly SchoolContext db;

        public StudentEditQueryHandler(SchoolContext db)
        {
            this.db = db;
        }

        public StudentEditModel Handle(StudentEditQuery message)
        {
            var student = db.Students
                .Where(s => s.ID == message.Id)
                .ProjectToSingleOrDefault<StudentEditModel>();

            return student;
        }
    }

    public class StudentEditHandler : RequestHandler<StudentEditModel>
    {
        private readonly SchoolContext db;

        public StudentEditHandler(SchoolContext db)
        {
            this.db = db;
        }

        protected override void HandleCore(StudentEditModel message)
        {
            var student = db.Students.Find(message.ID);

            Mapper.Map(message, student);
        }
    }
    public class StudentDeleteQueryHandler : IRequestHandler<StudentDeleteQuery, StudentDeleteModel>
    {
        private readonly SchoolContext db;

        public StudentDeleteQueryHandler(SchoolContext db)
        {
            this.db = db;
        }

        public StudentDeleteModel Handle(StudentDeleteQuery message)
        {
            var student = db.Students
                .Where(s => s.ID == message.Id)
                .ProjectToSingleOrDefault<StudentDeleteModel>();

            return student;
        }
    }

    public class StudentDeleteHandler : RequestHandler<StudentDeleteModel>
    {
        private readonly SchoolContext db;

        public StudentDeleteHandler(SchoolContext db)
        {
            this.db = db;
        }

        protected override void HandleCore(StudentDeleteModel message)
        {
            var student = db.Students.Find(message.ID);

            db.Students.Remove(student);
        }
    }
	
StudentController.cs

    public class StudentController : Controller
    {
        private readonly IMediator _mediator;

        public StudentController(IMediator mediator)
        {
            _mediator = mediator;
        }

        // GET: /Student/
        public ViewResult Index(StudentIndexQuery query)
        {
            var model = _mediator.Send(query);

            return View(model);
        }

        // GET: /Student/Details/5
        public ActionResult Details(StudentDetailsQuery query)
        {
            if (query.Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var student = _mediator.Send(query);
            if (student == null)
            {
                return HttpNotFound();
            }
            return View(student);
        }

        // GET: /Student/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: /Student/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(StudentCreateModel model)
        {
            _mediator.Send(model);

            return this.RedirectToActionJson("Index");
        }


        // GET: /Student/Edit/5
        public ActionResult Edit(StudentEditQuery query)
        {
            if (query.Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var student = _mediator.Send(query);
            if (student == null)
            {
                return HttpNotFound();
            }
            return View(student);
        }

        // POST: /Student/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(StudentEditModel model)
        {
            _mediator.Send(model);

            return this.RedirectToActionJson("Index");
        }

        // GET: /Student/Delete/5
        public ActionResult Delete(StudentDeleteQuery query)
        {
            if (query.Id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            var student = _mediator.Send(query);
            if (student == null)
            {
                return HttpNotFound();
            }
            return View(student);
        }

        // POST: /Student/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(StudentDeleteModel model)
        {
            _mediator.Send(model);

            return this.RedirectToActionJson("Index");
        }
    }

ValidatorActionFilter.cs
        public void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (!filterContext.Controller.ViewData.ModelState.IsValid)
            {
                if (filterContext.HttpContext.Request.HttpMethod == "GET")
                {
                    var result = new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                    filterContext.Result = result;
                }
                else
                {
                    var result = new ContentResult();
                    string content = JsonConvert.SerializeObject(filterContext.Controller.ViewData.ModelState,
                        new JsonSerializerSettings
                        {
                            ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                        });
                    result.Content = content;
                    result.ContentType = "application/json";

                    filterContext.HttpContext.Response.StatusCode = 400;
                    filterContext.Result = result;
                }
            }
        }

4. Feature folders


    public class FeatureViewLocationRazorViewEngine : RazorViewEngine
    {
        public FeatureViewLocationRazorViewEngine()
        {
            ViewLocationFormats = new[]
            {
                "~/Features/{1}/{0}.cshtml",
                "~/Features/{1}/{0}.vbhtml",
                "~/Features/Shared/{0}.cshtml",
                "~/Features/Shared/{0}.vbhtml",
            };

            MasterLocationFormats = ViewLocationFormats;

            PartialViewLocationFormats = new[]
            {
                "~/Features/{1}/{0}.cshtml",
                "~/Features/{1}/{0}.vbhtml",
                "~/Features/Shared/{0}.cshtml",
                "~/Features/Shared/{0}.vbhtml",
            };
        }
    }

ViewStart.cshtml
@{
    Layout = "~/Features/Shared/_Layout.cshtml";
}


global.asax.cs

            ViewEngines.Engines.Clear();
            ViewEngines.Engines.Add(new FeatureViewLocationRazorViewEngine());

